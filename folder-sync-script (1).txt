# Script to sync folders between two servers when changes are detected
# This script will run as a scheduled task on the primary server

param (
    [string]$PrimaryServer = $env:COMPUTERNAME,
    [string]$SecondaryServer = "SECONDARY-SERVER", # Replace with your secondary server name
    [string]$SourcePath1 = "D:\WEMData\Storage",
    [string]$DestPath1 = "\\$SecondaryServer\D$\WEMData\Storage",
    [string]$SourcePath2 = "D:\WEMData",
    [string]$DestPath2 = "\\$SecondaryServer\D$\WEMData",
    [string]$LogPath = "C:\Logs\FolderSync"
)

# Create log directory if it doesn't exist
if (-not (Test-Path -Path $LogPath)) {
    New-Item -Path $LogPath -ItemType Directory -Force | Out-Null
}

$LogFile = Join-Path -Path $LogPath -ChildPath "FolderSync_$(Get-Date -Format 'ddMMyyyy').log"

# Clean up log files older than 30 days
$OldLogFiles = Get-ChildItem -Path $LogPath -Filter "FolderSync_*.log" | Where-Object { $_.LastWriteTime -lt (Get-Date).AddDays(-30) }
foreach ($OldLog in $OldLogFiles) {
    Remove-Item -Path $OldLog.FullName -Force
}
if ($OldLogFiles.Count -gt 0) {
    Write-Output "Cleaned up $($OldLogFiles.Count) old log files"
}

# Function to write to log file
function Write-Log {
    param (
        [string]$Message
    )
    
    $Timestamp = Get-Date -Format "dd/MM/yyyy HH:mm:ss"
    "$Timestamp - $Message" | Out-File -FilePath $LogFile -Append
    Write-Output "$Timestamp - $Message"
}

Write-Log "Starting folder sync operation"

# Check connectivity to secondary server
if (-not (Test-Connection -ComputerName $SecondaryServer -Count 1 -Quiet)) {
    Write-Log "Error: Cannot connect to secondary server $SecondaryServer. Sync operation aborted."
    exit 1
}

# Function to sync folders
function Sync-Folders {
    param (
        [string]$Source,
        [string]$Destination,
        [scriptblock]$Filter = { $true }
    )
    
    Write-Log "Checking for changes between $Source and $Destination"
    
    if (-not (Test-Path -Path $Source)) {
        Write-Log "Error: Source path $Source does not exist"
        return
    }
    
    if (-not (Test-Path -Path $Destination)) {
        # Create destination if it doesn't exist
        try {
            New-Item -Path $Destination -ItemType Directory -Force | Out-Null
            Write-Log "Created destination directory: $Destination"
        }
        catch {
            Write-Log "Error creating destination directory: $($_.Exception.Message)"
            return
        }
    }
    
    try {
        # Get files based on filter
        $files = Get-ChildItem -Path $Source -Recurse -File | Where-Object $Filter
        
        foreach ($file in $files) {
            $relativePath = $file.FullName.Substring($Source.Length)
            $destFile = Join-Path -Path $Destination -ChildPath $relativePath
            $destDir = Split-Path -Path $destFile -Parent
            
            # Create destination directory if it doesn't exist
            if (-not (Test-Path -Path $destDir)) {
                New-Item -Path $destDir -ItemType Directory -Force | Out-Null
            }
            
            # Check if destination file exists and is different
            $syncNeeded = $false
            
            if (-not (Test-Path -Path $destFile)) {
                $syncNeeded = $true
                Write-Log "New file detected: $($file.FullName)"
            }
            else {
                $sourceLastWrite = (Get-Item -Path $file.FullName).LastWriteTime
                $destLastWrite = (Get-Item -Path $destFile).LastWriteTime
                
                if ($sourceLastWrite -ne $destLastWrite) {
                    $syncNeeded = $true
                    Write-Log "Modified file detected: $($file.FullName)"
                }
            }
            
            if ($syncNeeded) {
                # Copy the file
                Copy-Item -Path $file.FullName -Destination $destFile -Force
                Write-Log "Synced file: $($file.FullName) to $destFile"
                
                # Copy timestamps to ensure accurate comparison in future runs
                $sourceItem = Get-Item -Path $file.FullName
                $destItem = Get-Item -Path $destFile
                $destItem.CreationTime = $sourceItem.CreationTime
                $destItem.LastWriteTime = $sourceItem.LastWriteTime
                $destItem.LastAccessTime = $sourceItem.LastAccessTime
            }
        }
        
        # Check for deleted files (files that exist in destination but not in source)
        $destFiles = Get-ChildItem -Path $Destination -Recurse -File | Where-Object $Filter
        
        foreach ($destFile in $destFiles) {
            $relativePath = $destFile.FullName.Substring($Destination.Length)
            $sourceFile = Join-Path -Path $Source -ChildPath $relativePath
            
            if (-not (Test-Path -Path $sourceFile)) {
                # File exists in destination but not in source, so delete it
                Remove-Item -Path $destFile.FullName -Force
                Write-Log "Removed deleted file: $($destFile.FullName)"
            }
        }
        
        # Check for empty directories in destination and clean them up
        $destDirs = Get-ChildItem -Path $Destination -Recurse -Directory
        foreach ($dir in $destDirs) {
            if ((Get-ChildItem -Path $dir.FullName -Recurse -File).Count -eq 0) {
                Remove-Item -Path $dir.FullName -Force -Recurse
                Write-Log "Removed empty directory: $($dir.FullName)"
            }
        }
    }
    catch {
        Write-Log "Error during sync operation: $($_.Exception.Message)"
    }
}

# Sync the first folder (D:\WEMData\Storage) - sync all files and folders
Write-Log "Starting sync for all files in $SourcePath1"
Sync-Folders -Source $SourcePath1 -Destination $DestPath1

# Sync the second folder (D:\WEMData) - only files starting with gpo-
Write-Log "Starting sync for gpo-* files in $SourcePath2"
Sync-Folders -Source $SourcePath2 -Destination $DestPath2 -Filter { $_.Name -like "gpo-*" }

# Now check for changes in the opposite direction (from secondary to primary)

# For D:\WEMData\Storage - sync all files
Write-Log "Checking for changes from secondary to primary for $DestPath1"
Sync-Folders -Source $DestPath1 -Destination $SourcePath1

# For D:\WEMData - only files starting with gpo-
Write-Log "Checking for changes from secondary to primary for gpo-* files in $DestPath2"
Sync-Folders -Source $DestPath2 -Destination $SourcePath2 -Filter { $_.Name -like "gpo-*" }

Write-Log "Folder sync operation completed successfully"
