# Citrix App Layering PowerShell Function Reference
## Complete Library of 52 Functions with Execution Stages

### Configuration Management Functions

#### Read-ConfigFile
**Stage:** Stage 1 & Stage 2  
**Purpose:** Reads and parses the CitrixConfig.txt configuration file  
**Parameters:** 
- `ConfigFilePath` (string): Path to configuration file
**Returns:** Hashtable of configuration values  
**Usage:** `$Config = Read-ConfigFile -ConfigFilePath ".\CitrixConfig.txt"`

#### Get-ConfigValue
**Stage:** Stage 1 & Stage 2  
**Purpose:** Retrieves a specific configuration value with default fallback  
**Parameters:** 
- `Config` (hashtable): Configuration data
- `Key` (string): Configuration key to retrieve
- `DefaultValue` (string): Default value if key not found
**Returns:** Configuration value or default  
**Usage:** `$ISOPath = Get-ConfigValue -Config $Config -Key "VDAISOSourcePath" -DefaultValue ""`

#### Show-LoadedConfiguration
**Stage:** Stage 1 & Stage 2  
**Purpose:** Displays all loaded configuration values for validation  
**Parameters:** 
- `Config` (hashtable): Configuration data to display
**Returns:** None (display only)  
**Usage:** `Show-LoadedConfiguration -Config $Config`

#### Get-DesktopPath
**Stage:** Stage 1 & Stage 2  
**Purpose:** Gets the current user's desktop path for log file placement  
**Parameters:** None  
**Returns:** String path to desktop directory  
**Usage:** `$DesktopPath = Get-DesktopPath`

### Logging and Diagnostics Functions

#### Write-Log
**Stage:** Stage 1 & Stage 2  
**Purpose:** Writes timestamped log entries to file and console  
**Parameters:** 
- `Message` (string): Log message
- `Level` (string): Log level (INFO, WARN, ERROR, SUCCESS)
**Returns:** None  
**Usage:** `Write-Log "Installation completed" "SUCCESS"`

#### Write-LogHeader
**Stage:** Stage 1 & Stage 2  
**Purpose:** Creates formatted section headers in logs  
**Parameters:** 
- `HeaderText` (string): Header text to display
**Returns:** None  
**Usage:** `Write-LogHeader "Citrix VDA Installation"`

#### Get-DesktopLogPath
**Stage:** Stage 1 & Stage 2  
**Purpose:** Generates desktop log file path with timestamp  
**Parameters:** 
- `LogFileName` (string): Base log file name
**Returns:** Full path to log file on desktop  
**Usage:** `$LogPath = Get-DesktopLogPath -LogFileName "CitrixInstall.log"`

### System Validation Functions

#### Test-AdminPrivileges
**Stage:** Stage 1 & Stage 2  
**Purpose:** Verifies script is running with administrator privileges  
**Parameters:** None  
**Returns:** Boolean indicating admin status  
**Usage:** `$IsAdmin = Test-AdminPrivileges`

#### Get-OSVersion
**Stage:** Stage 1  
**Purpose:** Retrieves detailed Windows operating system version information  
**Parameters:** None  
**Returns:** Object with OS version details  
**Usage:** `$OSInfo = Get-OSVersion`

#### Test-DriveConfiguration
**Stage:** Stage 1  
**Purpose:** Validates D: cache drive configuration and requirements  
**Parameters:** None  
**Returns:** Boolean indicating drive configuration validity  
**Usage:** `$DriveValid = Test-DriveConfiguration`

#### Test-VDIOptimizations
**Stage:** Stage 1  
**Purpose:** Checks if VDI optimizations have been applied correctly  
**Parameters:** None  
**Returns:** Boolean indicating optimization status  
**Usage:** `$OptimizationsApplied = Test-VDIOptimizations`

#### Test-AutomaticMaintenanceStatus
**Stage:** Stage 1  
**Purpose:** Verifies Windows automatic maintenance configuration  
**Parameters:** None  
**Returns:** Boolean indicating maintenance status  
**Usage:** `$MaintenanceOK = Test-AutomaticMaintenanceStatus`

#### Test-VMwareMemoryBallooningStatus
**Stage:** Stage 1  
**Purpose:** Checks VMware memory ballooning driver status  
**Parameters:** None  
**Returns:** Boolean indicating ballooning status  
**Usage:** `$BallooningDisabled = Test-VMwareMemoryBallooningStatus`

#### Test-FileAccess
**Stage:** Stage 1 & Stage 2  
**Purpose:** Tests read/write access to specified file path  
**Parameters:** 
- `Path` (string): Path to test access
**Returns:** Boolean indicating access availability  
**Usage:** `$CanWrite = Test-FileAccess -Path "C:\Temp"`

### File Operations Functions

#### Copy-FileWithValidation
**Stage:** Stage 1 & Stage 2  
**Purpose:** Copies files with MD5 hash validation and overwrite detection  
**Parameters:** 
- `SourcePath` (string): Source file path
- `DestinationPath` (string): Destination file path
**Returns:** Object with copy results and validation status  
**Usage:** `$CopyResult = Copy-FileWithValidation -SourcePath $Source -DestinationPath $Dest`

#### Copy-InstallationFiles
**Stage:** Stage 1  
**Purpose:** Copies installation files from network sources with validation  
**Parameters:** 
- `SourcePath` (string): Network source path
- `DestinationPath` (string): Local destination path
**Returns:** Object with copy operation results  
**Usage:** `$FileCopy = Copy-InstallationFiles -SourcePath $NetworkPath -DestinationPath $LocalPath`

#### Copy-OSSpecificStartupShutdownScripts
**Stage:** Stage 1  
**Purpose:** Copies OS-specific startup/shutdown scripts based on Windows version  
**Parameters:** 
- `SourcePath` (string): Source directory path
- `StartupDestination` (string): Startup scripts destination
- `ShutdownDestination` (string): Shutdown scripts destination
**Returns:** Object with script copy results  
**Usage:** `$ScriptCopy = Copy-OSSpecificStartupShutdownScripts -SourcePath $Source`

### Drive Management Functions

#### Start-DriveConfiguration
**Stage:** Stage 1  
**Purpose:** Initializes and configures drive settings for VDI environment  
**Parameters:** 
- `Interactive` (switch): Enable interactive mode for user prompts
**Returns:** Boolean indicating configuration success  
**Usage:** `$DriveConfig = Start-DriveConfiguration -Interactive`

#### Get-CacheDrive
**Stage:** Stage 1  
**Purpose:** Prompts for and validates D: cache drive attachment  
**Parameters:** None  
**Returns:** Boolean indicating cache drive availability  
**Usage:** `$CacheDriveReady = Get-CacheDrive`

### System Configuration Functions

#### Set-DNSSuffix
**Stage:** Stage 1  
**Purpose:** Configures DNS suffix search list for domain connectivity  
**Parameters:** 
- `DNSSuffix` (string): DNS suffix to configure
**Returns:** Boolean indicating configuration success  
**Usage:** `$DNSSet = Set-DNSSuffix -DNSSuffix "domain.local"`

#### Set-WindowsServices
**Stage:** Stage 1  
**Purpose:** Configures Windows services for VDI optimization  
**Parameters:** None  
**Returns:** Boolean indicating service configuration success  
**Usage:** `$ServicesConfigured = Set-WindowsServices`

#### Stop-NetBiosOverTCP
**Stage:** Stage 1  
**Purpose:** Disables NetBIOS over TCP/IP for security  
**Parameters:** None  
**Returns:** Boolean indicating NetBIOS disable success  
**Usage:** `$NetBiosDisabled = Stop-NetBiosOverTCP`

#### Stop-NetworkOffloadParameters
**Stage:** Stage 1  
**Purpose:** Disables network offload parameters for PVS compatibility  
**Parameters:** None  
**Returns:** Boolean indicating offload disable success  
**Usage:** `$OffloadDisabled = Stop-NetworkOffloadParameters`

#### Set-SMBSettings
**Stage:** Stage 1  
**Purpose:** Configures SMB settings for Citrix environments  
**Parameters:** None  
**Returns:** Boolean indicating SMB configuration success  
**Usage:** `$SMBConfigured = Set-SMBSettings`

#### Set-EventLogs
**Stage:** Stage 1  
**Purpose:** Configures event log locations and settings  
**Parameters:** None  
**Returns:** Boolean indicating event log configuration success  
**Usage:** `$EventLogsConfigured = Set-EventLogs`

#### Stop-VMwareMemoryBallooning
**Stage:** Stage 1  
**Purpose:** Disables VMware memory ballooning for VDI optimization  
**Parameters:** None  
**Returns:** Boolean indicating ballooning disable success  
**Usage:** `$BallooningDisabled = Stop-VMwareMemoryBallooning`

### Citrix Components Functions

#### Start-CitrixOptimizer
**Stage:** Stage 1  
**Purpose:** Executes Citrix Optimizer with specified templates  
**Parameters:** 
- `ConfigFilePath` (string): Path to configuration file
**Returns:** Object with optimization results and applied templates  
**Usage:** `$OptimizerResult = Start-CitrixOptimizer -ConfigFilePath $ConfigPath`

#### Start-FallbackCitrixOptimizations
**Stage:** Stage 1  
**Purpose:** Applies manual optimizations when Citrix Optimizer is unavailable  
**Parameters:** None  
**Returns:** Object with fallback optimization results  
**Usage:** `$FallbackResult = Start-FallbackCitrixOptimizations`

#### Stop-CitrixServices
**Stage:** Stage 1  
**Purpose:** Disables specified Citrix services based on configuration  
**Parameters:** 
- `ConfigFilePath` (string): Path to configuration file
**Returns:** Object with service disable results  
**Usage:** `$ServicesResult = Stop-CitrixServices -ConfigFilePath $ConfigPath`

#### Add-CitrixVDA
**Stage:** Stage 1  
**Purpose:** Installs Citrix VDA from ISO without delivery controller  
**Parameters:** 
- `VDAISOSourcePath` (string): Network path to VDA ISO
- `VDAISOPath` (string): Local path for VDA ISO
- `LogDir` (string): Directory for installation logs
**Returns:** Object with VDA installation results  
**Usage:** `$VDAResult = Add-CitrixVDA -VDAISOSourcePath $NetworkISO -VDAISOPath $LocalISO`

#### Add-PVSTargetDevice
**Stage:** Stage 1  
**Purpose:** Installs PVS Target Device from ISO  
**Parameters:** 
- `PVSISOSourcePath` (string): Network path to PVS ISO
- `PVSISOPath` (string): Local path for PVS ISO
**Returns:** Object with PVS installation results  
**Usage:** `$PVSResult = Add-PVSTargetDevice -PVSISOSourcePath $NetworkISO -PVSISOPath $LocalISO`

#### Add-WEMAgent
**Stage:** Stage 1  
**Purpose:** Installs WEM Agent without infrastructure server  
**Parameters:** 
- `WEMSourcePath` (string): Network path to WEM installer
- `WEMPath` (string): Local path for WEM installer
**Returns:** Object with WEM installation results  
**Usage:** `$WEMResult = Add-WEMAgent -WEMSourcePath $NetworkPath -WEMPath $LocalPath`

#### Add-UberAgent
**Stage:** Stage 1  
**Purpose:** Installs UberAgent with enhanced template and configuration management  
**Parameters:** 
- `UberAgentPath` (string): Path to UberAgent installer
- `ConfigFilePath` (string): Path to configuration file
**Returns:** Object with comprehensive UberAgent installation and configuration results  
**Usage:** `$UberAgentResult = Add-UberAgent -UberAgentPath $InstallerPath -ConfigFilePath $ConfigPath`

### Domain and Security Functions

#### Add-Domain
**Stage:** Stage 1  
**Purpose:** Joins computer to Active Directory domain  
**Parameters:** 
- `DomainName` (string): Domain name to join
- `Credential` (PSCredential): Domain credentials
- `OrganizationalUnit` (string): Target OU (optional)
**Returns:** Object with domain join results  
**Usage:** `$DomainResult = Add-Domain -DomainName "domain.local" -Credential $Creds`

#### Set-IBMTADDMPermissions
**Stage:** Stage 1  
**Purpose:** Configures IBM TADDM permissions and file operations  
**Parameters:** 
- `ConfigFilePath` (string): Path to configuration file
- `InstallBatPath` (string): Path to TADDM install batch file (optional)
**Returns:** Object with TADDM configuration results  
**Usage:** `$TADDMResult = Set-IBMTADDMPermissions -ConfigFilePath $ConfigPath`

#### Remove-DomainUserProfiles
**Stage:** Stage 2  
**Purpose:** Removes domain user profiles for VDI template preparation  
**Parameters:** None  
**Returns:** Object with profile removal results  
**Usage:** `$ProfileCleanup = Remove-DomainUserProfiles`

#### Remove-WEMRSAKey
**Stage:** Stage 2  
**Purpose:** Removes WEM RSA key for template preparation  
**Parameters:** None  
**Returns:** Boolean indicating key removal success  
**Usage:** `$KeyRemoved = Remove-WEMRSAKey`

### Startup/Shutdown Script Functions

#### Set-StartupShutdownScripts
**Stage:** Stage 1  
**Purpose:** Configures startup and shutdown scripts for Group Policy execution  
**Parameters:** 
- `ScriptCopyResults` (object): Results from script copy operations
- `StartupDestination` (string): Startup scripts destination path
- `ShutdownDestination` (string): Shutdown scripts destination path
**Returns:** Object with script configuration results  
**Usage:** `$ScriptConfig = Set-StartupShutdownScripts -ScriptCopyResults $CopyResults`

#### Add-StartupShutdownScripts
**Stage:** Stage 2  
**Purpose:** Registers startup and shutdown scripts in Group Policy  
**Parameters:** 
- `StartupScriptPath` (string): Path to startup scripts directory
- `ShutdownScriptPath` (string): Path to shutdown scripts directory
**Returns:** Object with script registration results  
**Usage:** `$Registration = Add-StartupShutdownScripts -StartupScriptPath $StartupPath`

### Utility Functions

#### Start-Logging
**Stage:** Stage 1 & Stage 2  
**Purpose:** Initializes logging system with specified log file path  
**Parameters:** 
- `LogPath` (string): Full path to log file
- `ClearExisting` (switch): Clear existing log file if present
**Returns:** Boolean indicating logging initialization success  
**Usage:** `$LogInit = Start-Logging -LogPath $LogPath -ClearExisting`

#### New-InstallConfig
**Stage:** Stage 1  
**Purpose:** Creates new installation configuration object for tracking  
**Parameters:** None  
**Returns:** Object with installation configuration structure  
**Usage:** `$InstallConfig = New-InstallConfig`

---

## Functions by Execution Stage

### Stage 1 Functions (Initial Installation & Configuration)
**Count: 37 functions**

#### Core System Setup
- Get-OSVersion
- Test-DriveConfiguration
- Start-DriveConfiguration
- Get-CacheDrive
- Set-DNSSuffix

#### System Optimization
- Set-WindowsServices
- Stop-NetBiosOverTCP
- Stop-NetworkOffloadParameters
- Set-SMBSettings
- Set-EventLogs
- Stop-VMwareMemoryBallooning

#### Citrix Components
- Start-CitrixOptimizer
- Start-FallbackCitrixOptimizations
- Stop-CitrixServices
- Add-CitrixVDA
- Add-PVSTargetDevice
- Add-WEMAgent
- Add-UberAgent

#### Domain Operations
- Add-Domain
- Set-IBMTADDMPermissions

#### File Operations
- Copy-InstallationFiles
- Copy-OSSpecificStartupShutdownScripts
- Set-StartupShutdownScripts

#### System Validation
- Test-VDIOptimizations
- Test-AutomaticMaintenanceStatus
- Test-VMwareMemoryBallooningStatus

#### Utility
- New-InstallConfig

### Stage 2 Functions (Finalization & Template Preparation)
**Count: 3 functions**

#### Template Preparation
- Remove-DomainUserProfiles
- Remove-WEMRSAKey

#### Script Registration
- Add-StartupShutdownScripts

### Shared Functions (Both Stages)
**Count: 12 functions**

#### Configuration Management
- Read-ConfigFile
- Get-ConfigValue
- Show-LoadedConfiguration
- Get-DesktopPath

#### Logging System
- Write-Log
- Write-LogHeader
- Get-DesktopLogPath
- Start-Logging

#### System Validation
- Test-AdminPrivileges
- Test-FileAccess

#### File Operations
- Copy-FileWithValidation

---

## Stage Execution Flow

### Stage 1: Initial Installation & Configuration
1. **System Validation** - Admin privileges, OS version, drive configuration
2. **Drive Management** - Cache drive setup and configuration
3. **Network Configuration** - DNS, NetBIOS, SMB settings
4. **System Optimization** - Services, event logs, VMware settings
5. **Citrix Installation** - VDA, PVS, WEM, UberAgent components
6. **Citrix Optimization** - Optimizer execution and service configuration
7. **Domain Operations** - Domain join and TADDM permissions
8. **Script Management** - Startup/shutdown script copying and configuration

### Stage 2: Finalization & Template Preparation
1. **Profile Cleanup** - Remove domain user profiles
2. **Security Cleanup** - Remove WEM RSA keys
3. **Script Registration** - Register startup/shutdown scripts in Group Policy

**Total Functions: 52**  
**Total Code Lines: 5,077**  
**Stage 1 Functions: 37 (71%)**  
**Stage 2 Functions: 3 (6%)**  
**Shared Functions: 12 (23%)**