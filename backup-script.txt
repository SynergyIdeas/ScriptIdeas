param (
    [Parameter(Mandatory=$false)]
    [string]$SourceFolder = "D:\WEMData",
    
    [Parameter(Mandatory=$false)]
    [string]$BackupDestination = "D:\Backup\WEMDataBackup",
    
    [Parameter(Mandatory=$false)]
    [string]$LogFile = "D:\Logs\WEMBackup\WEMData_Backup_$(Get-Date -Format 'yyyyMMdd').log"
)

# Function to write to log file
function Write-Log {
    param (
        [string]$Message
    )
    
    # Ensure log directory exists
    $LogDirectory = Split-Path -Path $LogFile -Parent
    if (-not (Test-Path -Path $LogDirectory)) {
        New-Item -Path $LogDirectory -ItemType Directory -Force | Out-Null
    }
    
    $TimeStamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    "$TimeStamp - $Message" | Out-File -FilePath $LogFile -Append
}

# Function to check if changes have occurred since last backup
function HasChangesOccurred {
    param (
        [string]$Folder,
        [string]$StateFile
    )
    
    Write-Log "Checking state file: $StateFile"
    
    # If state file doesn't exist, consider changes have occurred
    if (-not (Test-Path -Path $StateFile)) {
        Write-Log "State file does not exist - treating as first run"
        return $true
    }
    
    try {
        # Get current state of all files and folders
        $currentState = Get-ChildItem -Path $Folder -Recurse -ErrorAction SilentlyContinue | 
                       Select-Object FullName, LastWriteTime, Length |
                       ConvertTo-Json -Compress
                       
        # Read previous state from file
        $previousState = Get-Content -Path $StateFile -Raw -Encoding UTF8
        
        # Compare states
        $hasChanges = ($currentState -ne $previousState)
        
        if ($hasChanges) {
            Write-Log "Changes detected in folder structure or file timestamps"
        } else {
            Write-Log "No changes detected since last backup"
        }
        
        return $hasChanges
    }
    catch {
        Write-Log "Error reading state file: $_"
        return $true
    }
}

# Function to create backup
function Create-Backup {
    param (
        [string]$Source,
        [string]$Destination
    )
    
    try {
        # Create timestamp for the backup file name
        $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
        $zipFileName = "WEMData_Backup_$timestamp.zip"
        $zipFilePath = Join-Path -Path $Destination -ChildPath $zipFileName
        
        # Ensure the destination directory exists
        if (-not (Test-Path -Path $Destination)) {
            New-Item -Path $Destination -ItemType Directory -Force | Out-Null
            Write-Log "Created backup destination directory: $Destination"
        }
        
        # Create the zip file
        Add-Type -AssemblyName System.IO.Compression.FileSystem
        [System.IO.Compression.ZipFile]::CreateFromDirectory($Source, $zipFilePath)
        
        Write-Log "Backup created successfully: $zipFilePath"
        return $true
    }
    catch {
        Write-Log "Error creating backup: $_"
        return $false
    }
}

# Function to cleanup old backups (keep only the latest 10)
function Remove-OldBackups {
    param (
        [string]$BackupPath
    )
    
    try {
        # Get all WEMData backup zip files, sorted by creation time (newest first)
        $backupFiles = Get-ChildItem -Path $BackupPath -Filter "WEMData_Backup_*.zip" | 
                      Sort-Object CreationTime -Descending
        
        # If we have more than 10 backups, delete the oldest ones
        if ($backupFiles.Count -gt 10) {
            $filesToDelete = $backupFiles | Select-Object -Skip 10
            
            foreach ($file in $filesToDelete) {
                Remove-Item -Path $file.FullName -Force
                Write-Log "Deleted old backup: $($file.Name)"
            }
            
            Write-Log "Cleanup completed. Kept 10 most recent backups, deleted $($filesToDelete.Count) old backups"
        }
        else {
            Write-Log "Currently have $($backupFiles.Count) backup(s). No cleanup needed"
        }
    }
    catch {
        Write-Log "Error during backup cleanup: $_"
    }
}
function Save-CurrentState {
    param (
        [string]$Folder,
        [string]$StateFile
    )
    
    # Ensure the directory exists for the state file
    $StateDirectory = Split-Path -Path $StateFile -Parent
    if (-not (Test-Path -Path $StateDirectory)) {
        New-Item -Path $StateDirectory -ItemType Directory -Force | Out-Null
    }
    
    Get-ChildItem -Path $Folder -Recurse -ErrorAction SilentlyContinue | 
    Select-Object FullName, LastWriteTime, Length |
    ConvertTo-Json -Compress | 
    Out-File -FilePath $StateFile -Force -Encoding UTF8
    
    Write-Log "Saved current state to: $StateFile"
}

# Main script execution
try {
    Write-Log "Script started"
    
    # Validate folders
    if (-not (Test-Path -Path $SourceFolder)) {
        Write-Log "WEMData source folder does not exist: $SourceFolder"
        exit 1
    }
    
    # Define state file location in backup directory
    $stateFile = Join-Path -Path $BackupDestination -ChildPath "WEMData_BackupState.txt"
    
    # Check if changes have occurred
    Write-Log "Checking for changes in WEMData folder and all subfolders: $SourceFolder"
    if (HasChangesOccurred -Folder $SourceFolder -StateFile $stateFile) {
        Write-Log "Changes detected, creating backup"
        
        # Create backup
        $backupSuccess = Create-Backup -Source $SourceFolder -Destination $BackupDestination
        
        # If backup was successful, save the current state and cleanup old backups
        if ($backupSuccess) {
            Save-CurrentState -Folder $SourceFolder -StateFile $stateFile
            Remove-OldBackups -BackupPath $BackupDestination
        }
    }
    else {
        Write-Log "No changes detected since last backup"
    }
    
    Write-Log "Script completed successfully"
}
catch {
    Write-Log "Error: $_"
    exit 1
}
